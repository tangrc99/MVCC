//
// Created by 唐仁初 on 2022/9/14.
//

#ifndef GOSSIP_GOSSIPSLOT_H
#define GOSSIP_GOSSIPSLOT_H

#include <string>
#include <unordered_map>
#include <utility>
#include <mutex>
#include "ValueTable.h"

namespace gossip {

    using SlotVersion = long;
    using SlotValues = ValueTable;

    /// Class GossipSlot stores all K-V pairs generated by certain GossipNode. A GossipSlot only stores data from that GossipNode.
    class GossipSlot {
    public:

        /// Construction of GossipSlot, the name of a slot represents a node's name.
        /// \param name Slot name of GossipSlot.
        explicit GossipSlot(std::string name) : name_(std::move(name)), version_(0) {}

        /// Insert or update a K-V pair and update version of slot automatically.
        /// \param key The key of K-V pair
        /// \param value The value of K-V pair
        /// \return Updated slot version
        SlotVersion insertOrUpdate(const std::string &key, const std::string &value);

        /// Insert or update a K-V pair and set slot version to assigned value. If assigned version value is less than
        /// current version, the function will do nothing.
        /// \param key The key of K-V pair
        /// \param value The value of K-V pair
        /// \param version Assigned slot version
        /// \return Assigned slot version if succeed or -1 if failed
        SlotVersion insertOrUpdate(const std::string &key, const std::string &value, SlotVersion version);

        /// Delete a K-V pair in current slot.
        /// \param key The key of K-V pair
        /// \return Updated slot version if succeed or -1 if failed
        SlotVersion remove(const std::string &key);

        /// Delete a K-V pair in current slot and set slot version to assigned value.
        /// \param key The key of K-V pair
        /// \param version Assigned slot version
        /// \return Assigned slot version if succeed or -1 if failed
        SlotVersion remove(const std::string &key, SlotVersion version);

        /// Get current version of this slot.
        /// \return Current version
        [[nodiscard]] SlotVersion version() const {
            return version_;
        }

        /// Get the name of this slot.
        /// \return Slot name
        [[nodiscard]] std::string name() const {
            return name_;
        }

        /// Merge this slot with given SlotValues, if assigned version is less than current version, function will do nothing.
        /// \param values New values of this slot
        /// \param version Assigned version
        /// \return Assigned slot version if succeed or -1 if failed
        SlotVersion compareAndMergeSlot(SlotValues values, SlotVersion version);

        /// Get value and version of a K-V pair in this slot.
        /// \param key The key of K-V pair
        /// \return [value , version] if succeed or ["", 0] if not found
        std::pair<std::string, SlotVersion> find(const std::string &key);

//
//        /// Get the Copy of K-V pairs in this slot.
//        /// \return Copy of K-V pairs, struct format is std::unordered_map
//        [[nodiscard]] SlotValues messages() const {
//            return map_;
//        }

        /// Get approximate memory use of this slot.
        /// \return Approximate memory use
        [[nodiscard]] size_t approximateMemoryUse() const {
            return map_.memoryUse();
        }

    private:

        std::mutex mtx; // mutex of this slot
        std::string name_;  // name of this slot
        ValueTable map_;    // K-V pairs of this slot
        SlotVersion version_;   // version of this slot
    };

}


#endif //GOSSIP_GOSSIPSLOT_H
